#pragma kernel CSMain
static const float PI = 3.14159265f;
//static const float FLT_MAX = 3.402823466e+38f
static const float FLT_MAX = 999999.0f;
static const float EPSILON = 0.001f;

RWTexture2D<float4> Result;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection; 

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
float2 _PixelOffset;

float4 _DirectionalLight;

struct Sphere
{
    float3 position;
    float radius;
    float3 albedo;
    float3 specular;
};
int _SphereCount;
StructuredBuffer<Sphere> _Spheres;

struct AABB
{
    float3 min;
    float3 max;
	float3 albedo;
	float3 specular;
};

int _AABBCount;
StructuredBuffer<AABB> _AABBs;

float3 ComputeNormalOnAABB(float3 intersection, AABB aabb)
{
	float3 center = aabb.min + ((aabb.max - aabb.min) * 0.5f);
	float3 dir = intersection - center;
	float xyCoef = dir.y / dir.x;
	float zyCoef = dir.y / dir.z;

    float3 normal = float3(1, 0, 0) * sign(dir.x);
    if (-1 <= xyCoef && xyCoef <= 1) {
        normal = float3(0, 1, 0) * sign(dir.y);
    }
    else if (-1 < zyCoef && zyCoef < 1) {
        normal = float3(0, 0, 1) * sign(dir.z);
    }
    return normal;
}


struct Ray
{
	float3 origin;
	float3 direction;
	float3 energy;
};
Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f,1.0f,1.0f);
    return ray;
}
Ray CreateCameraRay(float2 uv)
{
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
    float3 specular;
};
RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.albedo = float3(0.0f, 0.0f, 0.0f);
    hit.specular = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
    // Calculate distance along the ray where the ground plane is intersected

	float t = -ray.origin.y / ray.direction.y;
	if (t > 0 && t < bestHit.distance)
	{
		bestHit.distance = t;
		bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
        bestHit.albedo = 1.0f;
        bestHit.specular = 0.0f;
    }
}

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere)
{
    // Calculate distance along the ray where the sphere is intersected
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.albedo = sphere.albedo;
        bestHit.specular = sphere.specular;
    }
}

void IntersectAABB(Ray ray, inout RayHit bestHit, AABB aabb)
{
    float3 inverseRayDirection = ray.direction/1.0f;
	int rayDirectionSigns[] = {
		inverseRayDirection.x < 0 ? 1 : 0,
		inverseRayDirection.y < 0 ? 1 : 0,
		inverseRayDirection.z < 0 ? 1 : 0
	};
	float3 bounds[] =
	{
        aabb.min,
        aabb.max
    };

    float tmin, tmax, tymin, tymax, tzmin, tzmax;
    tmin = (bounds[rayDirectionSigns[0]].x - ray.origin.x) * inverseRayDirection.x;
    tmax = (bounds[1 - rayDirectionSigns[0]].x - ray.origin.x) * inverseRayDirection.x;
    tymin = (bounds[rayDirectionSigns[1]].y - ray.origin.y) * inverseRayDirection.y;
    tymax = (bounds[1 - rayDirectionSigns[1]].y - ray.origin.y) * inverseRayDirection.y;

    if ((tmin > tymax) || (tymin > tmax))
        return;
    if (tymin > tmin)
        tmin = tymin;
    if (tymax < tmax)
        tmax = tymax;

    tzmin = (bounds[rayDirectionSigns[2]].z - ray.origin.z) * inverseRayDirection.z;
    tzmax = (bounds[1 - rayDirectionSigns[2]].z - ray.origin.z) * inverseRayDirection.z;

    if ((tmin > tzmax) || (tzmin > tmax))
        return;
    if (tzmin > tmin)
        tmin = tzmin;
    if (tzmax < tmax)
        tmax = tzmax;

    if (tmin > 0 && tmin < bestHit.distance)
    {
        bestHit.distance = tmin;
        bestHit.position = ray.origin + tmin * ray.direction;
        bestHit.normal = normalize(ComputeNormalOnAABB(bestHit.position, aabb));
        bestHit.albedo = aabb.albedo;
        bestHit.specular = aabb.specular;
    }
}

RayHit Trace(Ray ray)
{
	RayHit bestHit = CreateRayHit();
	// Trace ground plane
	//IntersectGroundPlane(ray, bestHit);
	// Trace spheres
	for (int i = 0; i < _SphereCount; i++) {
		IntersectSphere(ray, bestHit, _Spheres[i]);
	}

	for (int i = 0; i < _AABBCount; i++) {
        AABB aabb; 
        aabb.min = float3(-2.0f, 0.0f, 4.0f);
        aabb.max = float3(2.0f, 2.0f, 6.0f);
        aabb.albedo = float3(0, 1, 0);
        aabb.specular = float3(0.1f, 0.1f, 0.1f);
        IntersectAABB(ray, bestHit, _AABBs[i]);
	}
	return bestHit;
}




float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF)
    {
        // Reflect the ray and multiply energy with specular reflection
        ray.origin = hit.position + hit.normal * EPSILON;
        ray.direction = reflect(ray.direction, hit.normal);
        ray.energy *= hit.specular;
        // Shadow test ray
        bool shadow = false;
        Ray shadowRay = CreateRay(hit.position + hit.normal * EPSILON, -1 * _DirectionalLight.xyz);
        RayHit shadowHit = Trace(shadowRay);
        if (shadowHit.distance != 1.#INF)
        {
            return float3(0.0f, 0.0f, 0.0f);
        }
        // Return a diffuse-shaded color
        return saturate(dot(hit.normal, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * hit.albedo;
    }
    else
    {
        // Erase the ray's energy - the sky doesn't reflect anything
        ray.energy = 0.0f;
        // Sample the skybox and write it
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
    }
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);
    // Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);
    // Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);
    // Trace and shade
    float3 result = float3(0, 0, 0);
    for (int i = 0; i < 8; i++)
    {
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray, hit);
        if (!any(ray.energy))
            break;
    }
    Result[id.xy] = float4(result, 1);
}
